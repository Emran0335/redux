{"ast":null,"code":"import { ADDED, ALLCOMPLETED, CLEARCOMPLETED, COLORSELECTED, DELETED, TOGGLED } from \"./actionTypes\";\nimport initailState from \"./initialState\";\nconst nextTodoId = todosArr => {\n  const maxId = todosArr.reduce((maxId, todo) => Math.max(maxId, todo.id), -1);\n  return maxId + 1;\n};\nconst todoReducer = (state = initailState, action) => {\n  switch (action.type) {\n    // new todo object with id and text.\n    case ADDED:\n      return [...state, {\n        text: action.payload,\n        id: nextTodoId(state),\n        completed: false\n      }];\n    case TOGGLED:\n      // completed property of todo should be changed with payload todoId.\n      return state.map(todo => {\n        if (todo.id !== action.payload) {\n          return todo;\n        } else {\n          return {\n            ...todo,\n            completed: !todo.completed === true\n          };\n        }\n      });\n    case COLORSELECTED:\n      // colors array property of todo should be filled with payload color.\n      const {\n        color,\n        todoId\n      } = action.payload;\n      return state.map(todo => {\n        if (todo.id !== todoId) {\n          return todo;\n        } else {\n          return {\n            ...todo,\n            color: color\n          };\n        }\n      });\n    case DELETED:\n      // return new array with true/false boolean condition given by payload as todoId.\n      return state.filter(todo => todo.id !== action.payload);\n    case ALLCOMPLETED:\n      // completed property of each todo should be true.\n      return state.map(todo => {\n        return {\n          ...todo,\n          completed: true\n        };\n      });\n    case CLEARCOMPLETED:\n      // return new array with checking completed property of each todo object of the state array.\n      return state.filter(todo => !todo.completed === true);\n    default:\n      return state;\n  }\n};\nexport default todoReducer;","map":{"version":3,"names":["ADDED","ALLCOMPLETED","CLEARCOMPLETED","COLORSELECTED","DELETED","TOGGLED","initailState","nextTodoId","todosArr","maxId","reduce","todo","Math","max","id","todoReducer","state","action","type","text","payload","completed","map","color","todoId","filter"],"sources":["/Users/emranhossain/Desktop/Redux/react-redux-app-1/src/redux/todos/todoReducer.js"],"sourcesContent":["import {\n  ADDED,\n  ALLCOMPLETED,\n  CLEARCOMPLETED,\n  COLORSELECTED,\n  DELETED,\n  TOGGLED,\n} from \"./actionTypes\";\nimport initailState from \"./initialState\";\n\nconst nextTodoId = (todosArr) => {\n  const maxId = todosArr.reduce((maxId, todo) => Math.max(maxId, todo.id), -1);\n  return maxId + 1;\n};\nconst todoReducer = (state = initailState, action) => {\n  switch (action.type) {\n    // new todo object with id and text.\n    case ADDED:\n      return [\n        ...state,\n        {\n          text: action.payload,\n          id: nextTodoId(state),\n          completed: false,\n        },\n      ];\n    case TOGGLED:\n      // completed property of todo should be changed with payload todoId.\n      return state.map((todo) => {\n        if (todo.id !== action.payload) {\n          return todo;\n        } else {\n          return {\n            ...todo,\n            completed: !todo.completed === true,\n          };\n        }\n      });\n    case COLORSELECTED:\n      // colors array property of todo should be filled with payload color.\n      const { color, todoId } = action.payload;\n      return state.map((todo) => {\n        if (todo.id !== todoId) {\n          return todo;\n        } else {\n          return {\n            ...todo,\n            color: color,\n          };\n        }\n      });\n    case DELETED:\n      // return new array with true/false boolean condition given by payload as todoId.\n      return state.filter((todo) => todo.id !== action.payload);\n    case ALLCOMPLETED:\n      // completed property of each todo should be true.\n      return state.map((todo) => {\n        return {\n          ...todo,\n          completed: true,\n        };\n      });\n    case CLEARCOMPLETED:\n      // return new array with checking completed property of each todo object of the state array.\n      return state.filter((todo) => !todo.completed === true);\n    default:\n      return state;\n  }\n};\n\nexport default todoReducer;\n"],"mappings":"AAAA,SACEA,KAAK,EACLC,YAAY,EACZC,cAAc,EACdC,aAAa,EACbC,OAAO,EACPC,OAAO,QACF,eAAe;AACtB,OAAOC,YAAY,MAAM,gBAAgB;AAEzC,MAAMC,UAAU,GAAIC,QAAQ,IAAK;EAC/B,MAAMC,KAAK,GAAGD,QAAQ,CAACE,MAAM,CAAC,CAACD,KAAK,EAAEE,IAAI,KAAKC,IAAI,CAACC,GAAG,CAACJ,KAAK,EAAEE,IAAI,CAACG,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;EAC5E,OAAOL,KAAK,GAAG,CAAC;AAClB,CAAC;AACD,MAAMM,WAAW,GAAGA,CAACC,KAAK,GAAGV,YAAY,EAAEW,MAAM,KAAK;EACpD,QAAQA,MAAM,CAACC,IAAI;IACjB;IACA,KAAKlB,KAAK;MACR,OAAO,CACL,GAAGgB,KAAK,EACR;QACEG,IAAI,EAAEF,MAAM,CAACG,OAAO;QACpBN,EAAE,EAAEP,UAAU,CAACS,KAAK,CAAC;QACrBK,SAAS,EAAE;MACb,CAAC,CACF;IACH,KAAKhB,OAAO;MACV;MACA,OAAOW,KAAK,CAACM,GAAG,CAAEX,IAAI,IAAK;QACzB,IAAIA,IAAI,CAACG,EAAE,KAAKG,MAAM,CAACG,OAAO,EAAE;UAC9B,OAAOT,IAAI;QACb,CAAC,MAAM;UACL,OAAO;YACL,GAAGA,IAAI;YACPU,SAAS,EAAE,CAACV,IAAI,CAACU,SAAS,KAAK;UACjC,CAAC;QACH;MACF,CAAC,CAAC;IACJ,KAAKlB,aAAa;MAChB;MACA,MAAM;QAAEoB,KAAK;QAAEC;MAAO,CAAC,GAAGP,MAAM,CAACG,OAAO;MACxC,OAAOJ,KAAK,CAACM,GAAG,CAAEX,IAAI,IAAK;QACzB,IAAIA,IAAI,CAACG,EAAE,KAAKU,MAAM,EAAE;UACtB,OAAOb,IAAI;QACb,CAAC,MAAM;UACL,OAAO;YACL,GAAGA,IAAI;YACPY,KAAK,EAAEA;UACT,CAAC;QACH;MACF,CAAC,CAAC;IACJ,KAAKnB,OAAO;MACV;MACA,OAAOY,KAAK,CAACS,MAAM,CAAEd,IAAI,IAAKA,IAAI,CAACG,EAAE,KAAKG,MAAM,CAACG,OAAO,CAAC;IAC3D,KAAKnB,YAAY;MACf;MACA,OAAOe,KAAK,CAACM,GAAG,CAAEX,IAAI,IAAK;QACzB,OAAO;UACL,GAAGA,IAAI;UACPU,SAAS,EAAE;QACb,CAAC;MACH,CAAC,CAAC;IACJ,KAAKnB,cAAc;MACjB;MACA,OAAOc,KAAK,CAACS,MAAM,CAAEd,IAAI,IAAK,CAACA,IAAI,CAACU,SAAS,KAAK,IAAI,CAAC;IACzD;MACE,OAAOL,KAAK;EAChB;AACF,CAAC;AAED,eAAeD,WAAW"},"metadata":{},"sourceType":"module","externalDependencies":[]}