{"ast":null,"code":"const initailState = [{\n  id: 1,\n  text: \"Learning React JS\",\n  completed: f\n}, {\n  id: 2,\n  text: \"Learning Redux\",\n  completed: false,\n  color: \"red\"\n}];\nexport default initailState;\n\n/*\nconst initailState = [\n  {\n    id: 1,\n    text: \"Learning React JS\",\n    completed: true,\n    colors: [],\n  },\n  {\n    id: 2,\n    text: \"Learning Redux\",\n    completed: false,\n    colors: [\"red\"],\n  },\n];\n\n// added\nconst nextTodoId = (todosArr) => {\n  const maxId = todosArr.reduce((maxId, todo) => Math.max(maxId, todo.id), -1);\n  return maxId + 1;\n};\n\nconst newState = (state) => {\n  const text = \"ReactJS\";\n  return [\n    ...state,\n    {\n      id: nextTodoId(state),\n      text: text,\n    },\n  ];\n};\nconsole.log(\"ADDED\", newState(initailState));\n\n// toggled\nconst toggled = (todosArr) => {\n  // const payload = 1;\n  const payload = 2;\n  const newState = todosArr.map((todo) => {\n    if (todo.id !== payload) {\n      return todo;\n    } else {\n      return {\n        ...todo,\n        completed: !todo.completed,\n      };\n    }\n  });\n  return newState;\n};\n\nconst toggledResult = toggled(initailState);\nconsole.log(\"TOGGLED\", toggledResult);\n\n// colorselected with filter method\nconst colorSelected = (todosArr) => {\n  const color = \"blue\";\n  const todoId = 2;\n  const colorSelectedNew = todosArr.map((todo) => {\n    if (todo.id !== todoId) {\n      return todo;\n    } else {\n      return {\n        ...todo,\n        colors: [...todo.colors, color],\n      };\n    }\n  });\n  return colorSelectedNew;\n};\n\nconst colorResult = colorSelected(initailState);\nconsole.log(\"COLORSECLTED\", colorResult);\n\n// deleted\nconst deleted = (todosArr) => {\n  const todoId = 2;\n  return todosArr.filter((todo) => todo.id !== todoId);\n};\nconst deletedResult = deleted(initailState);\nconsole.log(\"DELETED\", deletedResult);\n\n// allcompleted\nconst allcompleted = (todosArr) => {\n  const completedNew = todosArr.map((todo) => {\n    return {\n      ...todo,\n      completed: true,\n    };\n  });\n  return completedNew;\n};\nconst completedResult = allcompleted(initailState);\nconsole.log(\"COMPLETED\", completedResult);\n\n// clearcompleted\nconst clearCompleted = (todosArr) => {\n  return todosArr.filter((todo) => !todo.completed === true);\n};\n\nconst clearCompletedResult = clearCompleted(initailState)\nconsole.log(\"CLEARCOMPLETED\", clearCompletedResult)\n\n*/","map":{"version":3,"names":["initailState","id","text","completed","f","color"],"sources":["/Users/emranhossain/Desktop/Redux/react-redux-app-1/src/redux/todos/initialState.js"],"sourcesContent":["const initailState = [\n  {\n    id: 1,\n    text: \"Learning React JS\",\n    completed: f,\n  },\n  {\n    id: 2,\n    text: \"Learning Redux\",\n    completed: false,\n    color: \"red\",\n  },\n];\nexport default initailState;\n\n/*\nconst initailState = [\n  {\n    id: 1,\n    text: \"Learning React JS\",\n    completed: true,\n    colors: [],\n  },\n  {\n    id: 2,\n    text: \"Learning Redux\",\n    completed: false,\n    colors: [\"red\"],\n  },\n];\n\n// added\nconst nextTodoId = (todosArr) => {\n  const maxId = todosArr.reduce((maxId, todo) => Math.max(maxId, todo.id), -1);\n  return maxId + 1;\n};\n\nconst newState = (state) => {\n  const text = \"ReactJS\";\n  return [\n    ...state,\n    {\n      id: nextTodoId(state),\n      text: text,\n    },\n  ];\n};\nconsole.log(\"ADDED\", newState(initailState));\n\n// toggled\nconst toggled = (todosArr) => {\n  // const payload = 1;\n  const payload = 2;\n  const newState = todosArr.map((todo) => {\n    if (todo.id !== payload) {\n      return todo;\n    } else {\n      return {\n        ...todo,\n        completed: !todo.completed,\n      };\n    }\n  });\n  return newState;\n};\n\nconst toggledResult = toggled(initailState);\nconsole.log(\"TOGGLED\", toggledResult);\n\n// colorselected with filter method\nconst colorSelected = (todosArr) => {\n  const color = \"blue\";\n  const todoId = 2;\n  const colorSelectedNew = todosArr.map((todo) => {\n    if (todo.id !== todoId) {\n      return todo;\n    } else {\n      return {\n        ...todo,\n        colors: [...todo.colors, color],\n      };\n    }\n  });\n  return colorSelectedNew;\n};\n\nconst colorResult = colorSelected(initailState);\nconsole.log(\"COLORSECLTED\", colorResult);\n\n// deleted\nconst deleted = (todosArr) => {\n  const todoId = 2;\n  return todosArr.filter((todo) => todo.id !== todoId);\n};\nconst deletedResult = deleted(initailState);\nconsole.log(\"DELETED\", deletedResult);\n\n// allcompleted\nconst allcompleted = (todosArr) => {\n  const completedNew = todosArr.map((todo) => {\n    return {\n      ...todo,\n      completed: true,\n    };\n  });\n  return completedNew;\n};\nconst completedResult = allcompleted(initailState);\nconsole.log(\"COMPLETED\", completedResult);\n\n// clearcompleted\nconst clearCompleted = (todosArr) => {\n  return todosArr.filter((todo) => !todo.completed === true);\n};\n\nconst clearCompletedResult = clearCompleted(initailState)\nconsole.log(\"CLEARCOMPLETED\", clearCompletedResult)\n\n*/\n"],"mappings":"AAAA,MAAMA,YAAY,GAAG,CACnB;EACEC,EAAE,EAAE,CAAC;EACLC,IAAI,EAAE,mBAAmB;EACzBC,SAAS,EAAEC;AACb,CAAC,EACD;EACEH,EAAE,EAAE,CAAC;EACLC,IAAI,EAAE,gBAAgB;EACtBC,SAAS,EAAE,KAAK;EAChBE,KAAK,EAAE;AACT,CAAC,CACF;AACD,eAAe},"metadata":{},"sourceType":"module","externalDependencies":[]}