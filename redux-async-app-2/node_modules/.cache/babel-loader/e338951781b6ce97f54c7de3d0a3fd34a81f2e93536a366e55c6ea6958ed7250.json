{"ast":null,"code":"import { COLORCHANGED, STATUSCHANGED } from \"./actionTypes\";\nimport initailState from \"./initialState\";\nconst filterReducer = (state = initailState, action) => {\n  switch (action.type) {\n    case STATUSCHANGED:\n      return {\n        ...state,\n        status: action.payload\n      };\n    case COLORCHANGED:\n      const {\n        color,\n        changedType\n      } = action.payload;\n      switch (changedType) {\n        case \"added\":\n          return {\n            ...state,\n            colors: [...state.colors, color]\n          };\n        case \"removed\":\n          return {\n            ...state,\n            colors: state.colors.filter(existingColor => existingColor !== color)\n          };\n        default:\n          return state;\n      }\n    default:\n      return state;\n  }\n};\nexport default filterReducer;\n\n/*\n// filter reducer\nconst filterInitialState = {\n  status: \"All\",\n  colors: [],\n};\n\nconst statusChanged = (type, payload) => {\n  return {\n    type: type,\n    payload: payload,\n  };\n};\n\nconst filterReducerStatusAction = (state, action) => {\n  switch (action.type) {\n    case \"changeStatus\":\n      return {\n        ...state,\n        status: action.payload,\n      };\n    default:\n      return state;\n  }\n};\n\nconst filterStatusActionResult = filterReducerStatusAction(\n  filterInitialState,\n  statusChanged(\"changeStatus\", \"Complete\")\n);\nconsole.log(\"filterStatusActionResult\", filterStatusActionResult);\n\nconst colorChanged = (type, color, changedType) => {\n  return {\n    type: type,\n    payload: {\n      color: color,\n      changedType: changedType,\n    },\n  };\n};\n\nconst filterReducerColorChanged = (state, action) => {\n  switch (action.type) {\n    case \"changedColor\":\n      const { color, changedType } = action.payload;\n      switch (changedType) {\n        case \"added\":\n          return {\n            ...state,\n            colors: [...state.colors, color],\n          };\n        case \"removed\":\n          return {\n            ...state,\n            colors: state.colors.filter(\n              (existingColor) => existingColor !== color\n            ),\n          };\n        default:\n          return state;\n      }\n    default:\n      return state;\n  }\n};\n\nconst filterColorChangedResult = filterReducerColorChanged(\n  filterInitialState,\n  colorChanged(\"changedColor\", \"blue\", \"added\")\n);\nconsole.log(\"filterColorChangedResult\", filterColorChangedResult);\n*/","map":{"version":3,"names":["COLORCHANGED","STATUSCHANGED","initailState","filterReducer","state","action","type","status","payload","color","changedType","colors","filter","existingColor"],"sources":["/Users/emranhossain/Desktop/Redux/redux-async-app-2/src/redux/filters/filterReducer.js"],"sourcesContent":["import { COLORCHANGED, STATUSCHANGED } from \"./actionTypes\";\nimport initailState from \"./initialState\";\n\nconst filterReducer = (state = initailState, action) => {\n  switch (action.type) {\n    case STATUSCHANGED:\n      return {\n        ...state,\n        status: action.payload,\n      };\n    case COLORCHANGED:\n      const { color, changedType } = action.payload;\n      switch (changedType) {\n        case \"added\":\n          return {\n            ...state,\n            colors: [...state.colors, color],\n          };\n        case \"removed\":\n          return {\n            ...state,\n            colors: state.colors.filter(\n              (existingColor) => existingColor !== color\n            ),\n          };\n        default:\n          return state;\n      }\n    default:\n      return state;\n  }\n};\nexport default filterReducer;\n\n/*\n// filter reducer\nconst filterInitialState = {\n  status: \"All\",\n  colors: [],\n};\n\nconst statusChanged = (type, payload) => {\n  return {\n    type: type,\n    payload: payload,\n  };\n};\n\nconst filterReducerStatusAction = (state, action) => {\n  switch (action.type) {\n    case \"changeStatus\":\n      return {\n        ...state,\n        status: action.payload,\n      };\n    default:\n      return state;\n  }\n};\n\nconst filterStatusActionResult = filterReducerStatusAction(\n  filterInitialState,\n  statusChanged(\"changeStatus\", \"Complete\")\n);\nconsole.log(\"filterStatusActionResult\", filterStatusActionResult);\n\nconst colorChanged = (type, color, changedType) => {\n  return {\n    type: type,\n    payload: {\n      color: color,\n      changedType: changedType,\n    },\n  };\n};\n\nconst filterReducerColorChanged = (state, action) => {\n  switch (action.type) {\n    case \"changedColor\":\n      const { color, changedType } = action.payload;\n      switch (changedType) {\n        case \"added\":\n          return {\n            ...state,\n            colors: [...state.colors, color],\n          };\n        case \"removed\":\n          return {\n            ...state,\n            colors: state.colors.filter(\n              (existingColor) => existingColor !== color\n            ),\n          };\n        default:\n          return state;\n      }\n    default:\n      return state;\n  }\n};\n\nconst filterColorChangedResult = filterReducerColorChanged(\n  filterInitialState,\n  colorChanged(\"changedColor\", \"blue\", \"added\")\n);\nconsole.log(\"filterColorChangedResult\", filterColorChangedResult);\n*/\n"],"mappings":"AAAA,SAASA,YAAY,EAAEC,aAAa,QAAQ,eAAe;AAC3D,OAAOC,YAAY,MAAM,gBAAgB;AAEzC,MAAMC,aAAa,GAAGA,CAACC,KAAK,GAAGF,YAAY,EAAEG,MAAM,KAAK;EACtD,QAAQA,MAAM,CAACC,IAAI;IACjB,KAAKL,aAAa;MAChB,OAAO;QACL,GAAGG,KAAK;QACRG,MAAM,EAAEF,MAAM,CAACG;MACjB,CAAC;IACH,KAAKR,YAAY;MACf,MAAM;QAAES,KAAK;QAAEC;MAAY,CAAC,GAAGL,MAAM,CAACG,OAAO;MAC7C,QAAQE,WAAW;QACjB,KAAK,OAAO;UACV,OAAO;YACL,GAAGN,KAAK;YACRO,MAAM,EAAE,CAAC,GAAGP,KAAK,CAACO,MAAM,EAAEF,KAAK;UACjC,CAAC;QACH,KAAK,SAAS;UACZ,OAAO;YACL,GAAGL,KAAK;YACRO,MAAM,EAAEP,KAAK,CAACO,MAAM,CAACC,MAAM,CACxBC,aAAa,IAAKA,aAAa,KAAKJ,KACvC;UACF,CAAC;QACH;UACE,OAAOL,KAAK;MAChB;IACF;MACE,OAAOA,KAAK;EAChB;AACF,CAAC;AACD,eAAeD,aAAa;;AAE5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}